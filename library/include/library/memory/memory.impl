/**
 * @file memory.impl
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2025-10-11
 * 
 * @copyright Copyright (c) 2025
 * 
 */
#ifndef C_LIBRARY_MEMORY_IMPL
#define C_LIBRARY_MEMORY_IMPL

#include <stdlib.h>
#include <assert.h>


void* 
mem_aligned_alloc(size_t alignment, size_t size)
{
  assert(0 && "mem_aligned_alloc is not implemented!");
  return NULL;
}

void* 
mem_cont_alloc(size_t nmemb, size_t size)
{
  return calloc(nmemb, size);
}

void 
mem_free(void *ptr)
{
  free(ptr);
}

void 
mem_free_sized(void *ptr, size_t size)
{
  assert(0 && "mem_free_sized is not implemented!");
}

void 
mem_free_aligned_sized(
  void *ptr, 
  size_t alignment, 
  size_t size)
{
  assert(0 && "mem_free_aligned_sized is not implemented!");
}

void* 
mem_alloc(size_t size)
{
  return malloc(size);
}

void* 
mem_realloc(
  void *ptr, 
  size_t size)
{
  return realloc(ptr, size);
}

#endif